generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  
  @@index([shop])
  @@index([expires])
}

model Customer {
  id                String      @id @default(uuid())
  shopDomain        String      
  shopifyCustomerId String      
  email             String
  storeCredit       Float       @default(0)
  totalEarned       Float       @default(0)
  lastSyncedAt      DateTime?   // Track when balance was last synced with Shopify
  
  // New fields for enhanced customer management
  notes             String?     // Admin notes
  tags              String[]    @default([])  // Custom tags
  preferences       Json?       // Store customer preferences
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  transactions          CashbackTransaction[]
  membershipHistory     CustomerMembership[]
  creditLedger          StoreCreditLedger[]
  tierChangeLogs        TierChangeLog[]
  analytics             CustomerAnalytics?
  emailLogs             EmailLog[]
  emailPreferences      CustomerEmailPreferences?
  
  @@unique([shopDomain, shopifyCustomerId])
  @@index([shopDomain])
  @@index([email])
}

model CashbackTransaction {
  id                    String      @id @default(uuid())
  shopDomain            String      
  customerId            String
  shopifyOrderId        String      
  orderAmount           Float
  cashbackAmount        Float
  cashbackPercent       Float
  status                TransactionStatus @default(COMPLETED)
  shopifyTransactionId  String?     
  createdAt             DateTime    @default(now())
  
  customer              Customer    @relation(fields: [customerId], references: [id])
  
  @@unique([shopDomain, shopifyOrderId])
  @@index([shopDomain])
  @@index([customerId])
  @@index([createdAt])
}

model Tier {
  id                String              @id @default(uuid())
  shopDomain        String      
  name              String      
  minSpend          Float?      
  cashbackPercent   Float       
  evaluationPeriod  EvaluationPeriod    @default(ANNUAL)
  isActive          Boolean             @default(true)
  
  // Additional tier features
  benefits          Json?       // Additional benefits beyond cashback
  
  createdAt         DateTime            @default(now())
  
  customerMemberships CustomerMembership[]
  fromTierChanges   TierChangeLog[] @relation("FromTier")
  toTierChanges     TierChangeLog[] @relation("ToTier")
  
  @@unique([shopDomain, name])
  @@index([shopDomain])
  @@index([cashbackPercent])
}

model CustomerMembership {
  id                String      @id @default(uuid())
  customerId        String
  tierId            String
  startDate         DateTime    @default(now())
  endDate           DateTime?   // For manual overrides with expiration
  isActive          Boolean     @default(true)
  
  // New fields for manual override tracking
  assignmentType    AssignmentType @default(AUTOMATIC)
  assignedBy        String?     // Admin who made manual assignment
  reason            String?     // Reason for manual assignment
  previousTierId    String?     // Track tier transitions
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  customer          Customer    @relation(fields: [customerId], references: [id])
  tier              Tier        @relation(fields: [tierId], references: [id])
  
  @@unique([customerId, isActive])
  @@index([customerId])
  @@index([tierId])
  @@index([assignmentType])
}

model TierChangeLog {
  id                String      @id @default(uuid())
  customerId        String
  fromTierId        String?
  toTierId          String
  changeType        TierChangeType
  changeReason      String?
  triggeredBy       String?     // System or admin ID
  metadata          Json?       // Additional context (spending amount, etc.)
  createdAt         DateTime    @default(now())
  
  customer          Customer    @relation(fields: [customerId], references: [id])
  fromTier          Tier?       @relation("FromTier", fields: [fromTierId], references: [id])
  toTier            Tier        @relation("ToTier", fields: [toTierId], references: [id])
  
  @@index([customerId])
  @@index([createdAt])
}

model CustomerAnalytics {
  id                String      @id @default(uuid())
  customerId        String      @unique
  shopDomain        String
  
  // Spending analytics
  lifetimeSpending  Float       @default(0)
  yearlySpending    Float       @default(0)
  quarterlySpending Float       @default(0)
  monthlySpending   Float       @default(0)
  avgOrderValue     Float       @default(0)
  orderCount        Int         @default(0)
  
  // Tier analytics
  currentTierDays   Int         @default(0)
  tierUpgradeCount  Int         @default(0)
  lastTierChange    DateTime?
  nextTierProgress  Float       @default(0)  // Percentage to next tier
  
  // Engagement metrics
  lastOrderDate     DateTime?
  daysSinceLastOrder Int?
  
  calculatedAt      DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  @@index([shopDomain])
  @@index([customerId])
}

model Onboarding {
  id                String      @id @default(uuid())
  shopDomain        String      @unique
  businessName      String
  employeeCount     String
  country           String
  currency          String
  contactEmail      String
  productTypes      String[]
  goals             String[]
  completedAt       DateTime    @default(now())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([shopDomain])
  @@index([completedAt])
}

model MigrationHistory {
  id                String      @id @default(uuid())
  shopDomain        String
  status            MigrationStatus @default(PENDING)
  totalRecords      Int         @default(0)
  processedRecords  Int         @default(0)
  failedRecords     Int         @default(0)
  errors            Json?       // Array of error messages
  metadata          Json?       // Migration configuration (e.g., date range, batch size)
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime    @default(now())
  
  @@index([shopDomain])
  @@index([status])
  @@index([createdAt])
}

model StoreCreditLedger {
  id                String      @id @default(uuid())
  customerId        String
  shopDomain        String
  amount            Float       // Positive for credit, negative for debit
  balance           Float       // Running balance after this entry
  type              LedgerEntryType
  source            LedgerSource  // Track where change originated
  shopifyReference  String?     // Order ID, refund ID, or manual adjustment ID
  description       String?
  reconciledAt      DateTime?   // When verified against Shopify
  createdAt         DateTime    @default(now())
  
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  @@index([customerId])
  @@index([shopDomain])
  @@index([createdAt])
  @@index([shopifyReference])
  @@index([reconciledAt])
  @@index([source])
}

model EmailTemplate {
  id                String      @id @default(uuid())
  shopDomain        String
  type              EmailTemplateType
  name              String      // Display name for the template
  subject           String
  preheader         String
  heading           String
  body              String      @db.Text
  footer            String
  tone              EmailTone   @default(FRIENDLY)
  includeStoreLogo  Boolean     @default(true)
  includeUnsubscribe Boolean    @default(true)
  primaryColor      String      @default("#1a1a1a")
  buttonText        String?
  buttonUrl         String?
  enabled           Boolean     @default(false)
  
  // Optional segmentation
  customerSegment   String?     // null = all, "vip", "new", etc.
  tierId            String?     // null = all tiers, or specific tier
  minBalance        Float?      // Only send if balance >= this amount
  
  // Tracking
  lastModifiedBy    String?
  testEmailsSent    Int         @default(0)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  emailLogs         EmailLog[]
  
  @@unique([shopDomain, type, customerSegment, tierId])
  @@index([shopDomain])
  @@index([type])
  @@index([enabled])
}

model EmailLog {
  id              String      @id @default(uuid())
  shopDomain      String
  customerId      String
  templateId      String?
  templateType    EmailTemplateType
  recipientEmail  String
  subject         String
  status          EmailStatus @default(PENDING)
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  errorMessage    String?
  
  // Email content snapshot
  renderedBody    String?     @db.Text
  
  // Tracking
  opens           Int         @default(0)
  clicks          Int         @default(0)
  
  // Context data at time of send
  metadata        Json?       // Store credit balance, tier, etc. at send time
  
  createdAt       DateTime    @default(now())
  
  customer        Customer    @relation(fields: [customerId], references: [id])
  template        EmailTemplate? @relation(fields: [templateId], references: [id])
  
  @@index([shopDomain])
  @@index([customerId])
  @@index([templateType])
  @@index([status])
  @@index([sentAt])
  @@index([createdAt])
}

model CustomerEmailPreferences {
  id                String      @id @default(uuid())
  customerId        String      @unique
  shopDomain        String
  
  // Opt-in/out preferences by type
  creditEarnedOptIn     Boolean @default(true)
  balanceUpdateOptIn    Boolean @default(true)
  tierProgressOptIn     Boolean @default(true)
  marketingOptIn        Boolean @default(true)
  
  // Frequency preferences
  balanceUpdateFrequency EmailFrequency @default(MONTHLY)
  tierProgressFrequency  EmailFrequency @default(MONTHLY)
  
  // Other preferences
  preferredLanguage     String    @default("en")
  timezone              String    @default("UTC")
  
  // Tracking
  lastUpdated           DateTime  @default(now())
  updatedBy             String?   // customer or admin
  unsubscribedAt        DateTime?
  unsubscribeReason     String?
  
  customer              Customer  @relation(fields: [customerId], references: [id])
  
  @@index([shopDomain])
  @@index([customerId])
}

// Enums

enum TransactionStatus {
  COMPLETED
  SYNCED_TO_SHOPIFY
  SHOPIFY_SYNC_FAILED
}

enum EvaluationPeriod {
  ANNUAL         // 12 months rolling (default)
  LIFETIME       // All-time spending, never expires
}

enum MigrationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum LedgerEntryType {
  CASHBACK_EARNED     // From your cashback system
  ORDER_PAYMENT       // Used as payment on order
  REFUND_CREDIT       // Refunded to store credit
  MANUAL_ADJUSTMENT   // Admin adjustments
  SHOPIFY_SYNC        // Corrections from Shopify webhooks
  INITIAL_IMPORT      // Initial balance import
}

enum LedgerSource {
  APP_CASHBACK      // Your app generated
  APP_MANUAL        // Your app manual adjustment
  SHOPIFY_ADMIN     // Detected from Shopify admin
  SHOPIFY_ORDER     // Order payment/refund
  RECONCILIATION    // System reconciliation adjustment
}

enum AssignmentType {
  AUTOMATIC       // System-assigned based on spending
  MANUAL          // Admin override
  PROMOTIONAL     // Special promotion
  IMPORTED        // From data migration
}

enum TierChangeType {
  INITIAL_ASSIGNMENT
  AUTOMATIC_UPGRADE
  AUTOMATIC_DOWNGRADE
  MANUAL_OVERRIDE
  EXPIRATION_REVERT
  TIER_DELETION_MIGRATION
}

enum EmailTemplateType {
  CREDIT_EARNED
  BALANCE_UPDATE
  TIER_PROGRESS
  WELCOME
  TIER_UPGRADE
  TIER_DOWNGRADE
  CREDIT_EXPIRY_WARNING
}

enum EmailTone {
  PROFESSIONAL
  FRIENDLY
  CASUAL
  EXCITED
}

enum EmailStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

enum EmailFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  NEVER
}