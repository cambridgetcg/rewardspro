// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  
  // Add indexes for better query performance
  @@index([shop])
  @@index([expires])
}

model Customer {
  id                String      @id @default(uuid())
  shopifyCustomerId String      @unique
  email             String
  storeCredit       Float       @default(0)
  totalEarned       Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  transactions      CashbackTransaction[]
  redemptions       Redemption[]
  
  // Add indexes for common queries
  @@index([email])
  @@index([shopifyCustomerId])
}

model CashbackTransaction {
  id                String      @id @default(uuid())
  customerId        String
  shopifyOrderId    String      @unique
  orderAmount       Float
  cashbackAmount    Float
  cashbackPercent   Float
  status            TransactionStatus @default(COMPLETED)
  createdAt         DateTime    @default(now())
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  // Add indexes for common queries
  @@index([customerId])
  @@index([createdAt])
  @@index([status])
}

// New model for tracking redemptions
model Redemption {
  id                String      @id @default(uuid())
  customerId        String
  amount            Float
  method            RedemptionMethod
  referenceId       String?     // Discount code or order ID
  status            RedemptionStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  processedAt       DateTime?
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  // Indexes
  @@index([customerId])
  @@index([status])
}

// Enums for better type safety
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum RedemptionMethod {
  DISCOUNT_CODE
  STORE_CREDIT
  GIFT_CARD
  MANUAL
}

enum RedemptionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}