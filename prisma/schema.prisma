// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  
  // Add indexes for better query performance
  @@index([shop])
  @@index([expires])
}

model Customer {
  id                String      @id @default(uuid())
  shopifyCustomerId String      @unique
  email             String
  storeCredit       Float       @default(0)
  totalEarned       Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  transactions      CashbackTransaction[]
  redemptions       Redemption[]
  membershipHistory CustomerMembership[]
  spendingPeriods   CustomerSpendingPeriod[]
  
  // Add indexes for common queries
  @@index([email])
  @@index([shopifyCustomerId])
}

model CashbackTransaction {
  id                    String      @id @default(uuid())
  customerId            String
  shopifyOrderId        String      @unique
  orderAmount           Float
  cashbackAmount        Float
  cashbackPercent       Float
  status                TransactionStatus @default(COMPLETED)
  shopifyTransactionId  String?     // Store the Shopify store credit transaction ID
  createdAt             DateTime    @default(now())
  
  // Relations
  customer              Customer    @relation(fields: [customerId], references: [id])
  
  // Add indexes for common queries
  @@index([customerId])
  @@index([createdAt])
  @@index([status])
  @@index([shopifyTransactionId])
}

// New model for tracking redemptions
model Redemption {
  id                String      @id @default(uuid())
  customerId        String
  amount            Float
  method            RedemptionMethod
  referenceId       String?     // Discount code or order ID
  status            RedemptionStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  processedAt       DateTime?
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  // Indexes
  @@index([customerId])
  @@index([status])
}

// NEW: Tier definition model
model Tier {
  id                String      @id @default(uuid())
  name              String
  displayName       String
  level             Int         @unique // Numeric level for ordering (1, 2, 3, etc.)
  minSpend          Float?      // Minimum spending required (null for purchased tiers)
  spendingPeriodDays Int?       // Days to calculate spending (e.g., 365 for annual)
  cashbackPercent   Float       // Cashback percentage for this tier
  benefits          Json?       // JSON array of benefit descriptions
  color             String?     // UI color for the tier
  icon              String?     // Icon identifier
  isPurchasable     Boolean     @default(false)
  purchasePrice     Float?      // Price if purchasable
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  customerMemberships CustomerMembership[]
  
  // Indexes
  @@index([level])
  @@index([isActive])
}

// NEW: Customer membership tracking
model CustomerMembership {
  id                String      @id @default(uuid())
  customerId        String
  tierId            String
  startDate         DateTime    @default(now())
  endDate           DateTime?   // Null for active memberships
  source            MembershipSource
  purchaseOrderId   String?     // If purchased, reference to order
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  tier              Tier        @relation(fields: [tierId], references: [id])
  
  // Ensure only one active membership per customer
  @@unique([customerId, isActive])
  @@index([customerId])
  @@index([tierId])
  @@index([startDate])
  @@index([endDate])
}

// NEW: Track customer spending over periods
model CustomerSpendingPeriod {
  id                String      @id @default(uuid())
  customerId        String
  periodStart       DateTime
  periodEnd         DateTime
  totalSpent        Float       @default(0)
  orderCount        Int         @default(0)
  lastCalculated    DateTime    @default(now())
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  
  // Unique constraint to prevent overlapping periods
  @@unique([customerId, periodStart, periodEnd])
  @@index([customerId])
  @@index([periodStart])
  @@index([periodEnd])
}

// Enums for better type safety
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
  SYNCED_TO_SHOPIFY
  SHOPIFY_SYNC_FAILED
}

enum RedemptionMethod {
  DISCOUNT_CODE
  STORE_CREDIT
  GIFT_CARD
  MANUAL
}

enum RedemptionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// NEW: Membership source enum
enum MembershipSource {
  SPENDING_THRESHOLD  // Earned by spending
  PURCHASED          // Purchased directly
  MANUAL_ASSIGNMENT  // Manually assigned by admin
  PROMOTION         // Given as part of promotion
}